#!/usr/bin/env python
''' 
CConv - Currency Converter powered by Czech National Bank
Copyright (C) 2011 Tomas Radej

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
import sys
import urllib
import os
import datetime


class CurrencyTable:
    """Table with currencies, their rates and names"""
    def __init__(self, url, force_refresh = False):
        self.url = url
        self.tmp_file = '{}/{}.txt'.format(DEFAULT_PATH, url.split('=')[1])
        self.force_refresh = force_refresh
        self.table = {}
        self.names = {}

    def download_table(self):
        """Download the table from the path"""
        if self.force_refresh or not (os.path.exists(self.tmp_file)):
            sys.stderr.write('Refreshing table\n')
            urllib.urlretrieve(self.url, self.tmp_file)

    def parse_table(self):
        """Parse the table according to the pattern 
        Country|Currency Name|Amount|Symbol|Rate"""
        openfile = open(self.tmp_file, 'r')
        lines = openfile.readlines()
        lines.append('Czech Republic|koruna|1|CZK|1')
        del lines[0:2]
        for line in lines:
            vals = line.rsplit('|')
            self.names[vals[3]] = '{} ({})'.format(vals[0], vals[1])
            self.table[vals[3]] = float(vals[4])/float(vals[2])

    def convert(self, orig, target, amount):
        ''' Convert given amount of original currency to target currency '''
        if orig in self.table and target in self.table:
            return self.table[orig] * amount / self.table[target]
        else:
            sys.stderr.write('Currencies unknown\n')
            return -1
        
    def list_currencies(self):
        ''' List available currencies extracted from the rate table '''
        print 'Currency converter (powered by Czech National Bank)\n'
        print '   Currencies\n'
        for currency in sorted(self.table.keys()):
            print '   {} - {}'.format(currency, self.names[currency])
        print


def checkpath(path):
    ''' Create path if not existing '''
    if not os.path.exists(path):
        os.makedirs(path)

def show_help():
    ''' Shows help message '''
    print 'Currency converter (powered by Czech National Bank)'
    print '\n  Usage: cconv [options] [ original_currency target_currency amount ]'
    print '                         Currency symbols are case insensitive'
    print '\n  Options:'
    print '         -d --date       Specify a date to be downloaded.'
    print '         -h --help       Show this help'
    print '         -l --list       List available currencies (based on a current currency file)'
    print '         -r --refresh    Force refresh rates'
    print '\n  Notes:' 
    print '        - The currency file is automatically updated once a day upon'
    print '        first usage of the program. CNB claims that current data are available'
    print '        after 2:30 PM every day, therefore use -r if you want to force refresh'
    print '        the rates.'
    print '\n        - You can use date specification and currency listing together as'
    print '        the number of currencies listed changes in time'
    print '\n  Disclaimer: Program is provided as is, with no liability or claims of accuracy.'

    print '\n  Returns the amount converted or -1 if currency symbols are unknown\n'


def parse_date(string):
    ''' Parses string and returns date or None. String format should be YYYY-MM-DD '''
    try:
        year = int(string[0:4])
        month = int(string[5:7])
        day = int(string[8:10])
        return datetime.date(year, month, day)
    except ValueError:
        return None
        
if __name__ == '__main__':
    DEFAULT_PATH = '/tmp/cconv'
    USER_DATE = datetime.date.today()
    checkpath(DEFAULT_PATH)
    URL = ''
    AMOUNT = 0
    ORIGIN = ''
    TARGET = ''
    LIST_CURRENCIES = False
    FORCE_REFRESH = False

    if len(sys.argv) == 1:
        show_help()
        sys.exit(0)

    # Loop through arguments
    del sys.argv[0]
    SKIP = False
    for arg in sys.argv:
        if SKIP:
            SKIP = False
            continue

        if arg[0] == '-':
            if arg == '-h' or arg == '--help':
                show_help()
                sys.exit(0)
            if arg == '-d' or arg == '--date':
                # Needs checking index
                USER_DATE = parse_date(sys.argv[sys.argv.index(arg)+1])
                if USER_DATE == None:
                    sys.stderr.write('Wrong date format: {}!\n'.format(sys.argv[sys.argv.index(arg)+1]))
                    sys.exit(1)
                SKIP = True
                continue
            elif arg == '-l' or arg == '--list':
                LIST_CURRENCIES = True
                break
            elif arg == '-r' or arg == '--refresh':
                print 'Refresh'
                FORCE_REFRESH = True
            else:
                sys.stderr.write('Unrecognized switch!\n')
                show_help()
                sys.exit(1)
        else:
            try:
                AMOUNT = float(arg)
            except ValueError:
                if not ORIGIN == '':
                    TARGET = arg
                else:
                    ORIGIN = arg
            
    URL = 'http://www.cnb.cz/en/financial_markets/foreign_exchange_market/exchange_rate_fixing/daily.txt?date={}.{}.{}'.format(USER_DATE.day, USER_DATE.month, USER_DATE.year) 
    if not LIST_CURRENCIES:
        if AMOUNT == 0:
            sys.stderr.write('No amount specified!\n')
            sys.exit(-1)
        if ORIGIN == '' or TARGET == '':
            sys.stderr.write('You must specify the original and target currency!\n')
            sys.exit(1)

    TABLE = CurrencyTable(URL, FORCE_REFRESH)
    TABLE.download_table()
    TABLE.parse_table()

    if LIST_CURRENCIES:
        TABLE.list_currencies()
    else:
        print TABLE.convert(ORIGIN.upper(), TARGET.upper(), AMOUNT)
    

