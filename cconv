#!/usr/bin/env python
''' 
CConv - Currency Converter powered by Czech National Bank
Copyright (C) 2011 Tomas Radej

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
import sys
import urllib
import httplib
import os
from datetime import date
import optparse
from decimal import *


class CurrencyTable:
    '''Table with currencies, their rates and names'''
    def __init__(self, url, force_refresh = False):
        self.url = url
        # This method of saving files expects the URL to have a unique
        # part in form of date after the equals sign
        self.tmp_file = '{0}/{1}.txt'.format(DEFAULT_PATH, url.split('=')[1])
        self.force_refresh = force_refresh
        self.table = {} # Currency rates
        self.names = {} # Currency names (used in listing currencies) 

    def download_table(self):
        '''Download the table from the path'''
        if self.force_refresh or not (os.path.exists(self.tmp_file)):
            sys.stderr.write('Refreshing table\n')
            result = urllib.urlretrieve(self.url, self.tmp_file)
            # If a text/html is received, it's most probably an error message.
            # Valid data is text/plain. This might need better checking.
            if result[1].getheader('Content-Type').find('text/html') != -1:
                os.remove(self.tmp_file)
                raise Exception, 'Failed to retrieve data from CNB!'

    def parse_table(self):
        '''Parse the table according to the pattern 
        Country|Currency Name|Amount|Symbol|Rate'''
        openfile = open(self.tmp_file, 'r')
        lines = openfile.readlines()
        lines.append('Czech Republic|koruna|1|CZK|1')
        del lines[0:2] # Delete table header
        for line in lines:
            # This routine needs exception handling
            vals = line.rsplit('|')
            self.names[vals[3]] = '{0} ({1})'.format(vals[0], vals[1])
            self.table[vals[3]] = Decimal(vals[4])/Decimal(vals[2])

    def convert(self, orig, target, amount):
        ''' Convert given amount of original currency to target currency '''
        if orig in self.table and target in self.table:
            return self.table[orig] * amount / self.table[target]
        else:
            sys.stderr.write('Currencies unknown\n')
            return -1
        
    def list_currencies(self):
        ''' List available currencies extracted from the rate table '''
        print 'Currency converter (powered by Czech National Bank)\n'
        print '   Currencies\n'
        for currency in sorted(self.table.keys()):
            print '   {0} - {1}'.format(currency, self.names[currency])
        print

def __checkpath(path):
    ''' Create path if not existing '''
    if not os.path.exists(path):
        try:
            os.makedirs(path)
        except IOError:
            sys.stderr.write('Can not create data directory!\n')
            sys.exit(1)

def __parse_date(string):
    ''' Parses string and returns date or None. String format should be YYYY-MM-DD '''
    if string == None:
        return None
    try:
        tokens = [int(x) for x in string.split('-')]
        return date(tokens[0], tokens[1], tokens[2])
    except ValueError, IndexError:
        return None
        
def __get_args():
    ''' Returns a namespace with program's arguments '''
    parser = optparse.OptionParser( prog='cconv',
        description='CConv - Currency converter (powered by the Czech National Bank)', 
        epilog='You can select -l and -d at the same time to see what currencies were available \rat a given point in time. The data is available since 1991-01-01.\r ')
    parser.add_option('-l', '--list', action='store_const', const=True, help='List available currencies')
    parser.add_option('-r', '--refresh', action='store_const', const=True, help='Force refresh currency table')
    parser.add_option('-d', '--date', help='Select date for rates (YYYY-MM-DD format)')

    return parser.parse_args()


def __get_table(url, forceRefresh):
    ''' Get a currency table from the correspondent URL '''
    table = CurrencyTable(url, forceRefresh)

    try:
        table.download_table()
    except Exception as e:
        sys.stderr.write('{0}\n'.format(e))
        sys.exit(-1)

    table.parse_table()
    return table


def __get_url(userDate):
    ''' Returns the formatted URL of the data sheet '''
    # This is hardcoded now, but will be moved into a config file in 
    # some future version 
    url = 'http://www.cnb.cz/en/financial_markets/foreign_exchange_market/exchange_rate_fixing/daily.txt?date={0}.{1}.{2}'
    return url.format(userDate.day, userDate.month, userDate.year) 
 
   
def __main(options, args):
    ''' Main method '''
    userDate = date.today()
    if options.date != None:
        if __parse_date(options.date): 
            userDate = __parse_date(options.date) 
        else:
            sys.stderr.write('Wrong date format (YYYY-MM-DD expected)!\n')
            sys.exit(-1)

    url = __get_url(userDate)
    table = __get_table(url, options.refresh)

    if options.list:
        table.list_currencies()
    else:
        if len(args) != 3:
            sys.stderr.write('Wrong number of arguments (should be AMOUNT FROM TO)!\n')
            sys.exit(-1)
        if args[0] == 0:
            sys.stderr.write('No amount specified!\n')
            sys.exit(-1)
        if args[1] == '' or args[2] == '':
            sys.stderr.write('You must specify the original and target currency!\n')
            sys.exit(1)
    
        print table.convert(args[1].upper(), args[2].upper(), Decimal(args[0]))
        #print args
 
 
if __name__ == '__main__':
    DEFAULT_PATH = '/tmp/cconv'
    __checkpath(DEFAULT_PATH)
    
    (options, args) = __get_args()
    __main(options, args)
    pass
