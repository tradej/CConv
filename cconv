#!/usr/bin/env python
''' 
CConv - Currency Converter powered by Czech National Bank
Copyright (C) 2011 Tomas Radej

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
import sys
import urllib
import httplib
import os
from datetime import date
import argparse


class CurrencyTable:
    """Table with currencies, their rates and names"""
    def __init__(self, url, force_refresh = False):
        self.url = url
        self.tmp_file = '{}/{}.txt'.format(DEFAULT_PATH, url.split('=')[1])
        self.force_refresh = force_refresh
        self.table = {}
        self.names = {}

    def download_table(self):
        """Download the table from the path"""
        if self.force_refresh or not (os.path.exists(self.tmp_file)):
            sys.stderr.write('Refreshing table\n')
            result = urllib.urlretrieve(self.url, self.tmp_file)
            if result[1].getheader('Content-Type').find('text/html') != -1:
                os.remove(self.tmp_file)
                raise Exception, 'Failed to retrieve data from CNB!\n'

    def parse_table(self):
        """Parse the table according to the pattern 
        Country|Currency Name|Amount|Symbol|Rate"""
        openfile = open(self.tmp_file, 'r')
        lines = openfile.readlines()
        lines.append('Czech Republic|koruna|1|CZK|1')
        del lines[0:2]
        for line in lines:
            vals = line.rsplit('|')
            self.names[vals[3]] = '{} ({})'.format(vals[0], vals[1])
            self.table[vals[3]] = float(vals[4])/float(vals[2])

    def convert(self, orig, target, amount):
        ''' Convert given amount of original currency to target currency '''
        if orig in self.table and target in self.table:
            return self.table[orig] * amount / self.table[target]
        else:
            sys.stderr.write('Currencies unknown\n')
            return -1
        
    def list_currencies(self):
        ''' List available currencies extracted from the rate table '''
        print 'Currency converter (powered by Czech National Bank)\n'
        print '   Currencies\n'
        for currency in sorted(self.table.keys()):
            print '   {} - {}'.format(currency, self.names[currency])
        print


def checkpath(path):
    ''' Create path if not existing '''
    if not os.path.exists(path):
        os.makedirs(path)

def show_help():
    ''' Shows help message '''
    print 'Currency converter (powered by Czech National Bank)'
    print '\n  Usage: cconv [options] [ original_currency target_currency amount ]'
    print '                         Currency symbols are case insensitive'
    print '\n  Options:'
    print '         -d --date       Specify a date to be downloaded. (DDDD-MM-YY)'
    print '         -h --help       Show this help'
    print '         -l --list       List available currencies (based on a current currency file)'
    print '         -r --refresh    Force refresh rates'
    print '\n  Notes:' 
    print '        - The currency file is automatically updated once a day upon'
    print '        first usage of the program. CNB claims that current data are available'
    print '        after 1:30 PM GMT every day, therefore use -r if you want to force refresh'
    print '        the rates.'
    print '\n        - You can use date specification and currency listing together as'
    print '        the number of currencies listed changes in time'
    print '\n  Disclaimer: Program is provided as is, with no liability or claims of accuracy.'

    print '\n  Returns the amount converted or -1 if currency symbols are unknown\n'


def parse_date(string):
    ''' Parses string and returns date or None. String format should be YYYY-MM-DD '''
    if string == None:
        return None
    try:
        year = int(string[0:4])
        month = int(string[5:7])
        day = int(string[8:10])
        return date(year, month, day)
    except ValueError:
        return None
        
def __get_args():
    ''' Returns a namespace with program's arguments '''
    parser = argparse.ArgumentParser(description='Load arguments', prog='cconv')
    parser.add_argument('amount', type=int, help='Amount to be converted', nargs='?', default=0)
    parser.add_argument('origin', help='Original currency', nargs='?', default='')
    parser.add_argument('target', help='Target currency', nargs='?', default='')
    parser.add_argument('-l', '--list', action='store_const', const=True)
    parser.add_argument('-r', '--refresh', action='store_const', const=True)
    parser.add_argument('-d', '--date')

    return parser.parse_args()


def __get_table(url, forceRefresh):
    ''' Get a table with a correspondent URL '''
    table = CurrencyTable(url, forceRefresh)

    try:
        table.download_table()
    except Exception as e:
        sys.stderr.write('{0}'.format(e))
        sys.exit(-1)

    table.parse_table()
    return table


def __get_url(userDate):
     return 'http://www.cnb.cz/en/financial_markets/foreign_exchange_market/exchange_rate_fixing/daily.txt?date={}.{}.{}'.format(userDate.day, userDate.month, userDate.year) 
 
   
def __main(args):
    ''' Main method '''
    userDate = date.today()
    if args.date != None:
        if parse_date(args.date): 
            userDate = parse_date(args.date) 
        else:
            sys.stderr.write('Wrong date format (YYYY-MM-DD expected)!\n')
            sys.exit(-1)


    # Parsing arguments
    url = __get_url(userDate)
    table = __get_table(url, args.refresh)

    if args.list:
        table.list_currencies()
    else:
        if args.amount == 0:
            sys.stderr.write('No amount specified!\n')
            sys.exit(-1)
        if args.origin == '' or args.target == '':
            sys.stderr.write('You must specify the original and target currency!\n')
            sys.exit(1)
    
        print table.convert(args.origin.upper(), args.target.upper(), args.amount)
 
 
if __name__ == '__main__':
    DEFAULT_PATH = '/tmp/cconv'
    checkpath(DEFAULT_PATH)
    
    args = __get_args()
    __main(args)
    pass
